{"version":3,"sources":["wxbridge.js","App.js","serviceWorker.js","index.js"],"names":["__miniprogram_tunnel_message__cbs","isInMiniProgram","window","__wxjs_environment","callMiniprogramService","name","data","Promise","resolve","reject","msgId","Math","random","slice","err","localStorage","setItem","JSON","stringify","type","onstorage","e","matchKey","exec","key","newValue","obj","parse","cb","success","Error","message","console","error","App","useState","videoInfo","setVideoInfo","loading","setLoading","onClick","prompt","then","twitterURL","fetch","encodeURIComponent","resp","json","info","catch","alert","failed","width","height","preload","webkit-playsinline","controls","poster","src","url","fileName","id","Boolean","location","hostname","match","ReactDOM","render","path","exact","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4OAAIA,EAAoC,GAClCC,EAAgD,gBAA9BC,OAAOC,mBAwB/B,SAASC,EAAuBC,EAAMC,GACpC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,GAAS,GAAKC,KAAKC,UAAUC,MAAM,GACzCb,EAAkCU,GAAS,SAACI,EAAKR,GAC1CQ,EAGHL,EAAOK,GAFPN,EAAQF,IAKZS,aAAaC,QAAb,yCACoCN,GAClCO,KAAKC,UAAU,CAAEC,KAAMd,EAAMC,aAlCnCJ,OAAOkB,UAAY,SAACC,GAClB,IAAMC,EAAW,0CAA0CC,KAAKF,EAAEG,KAClE,GAAIF,GACED,EAAEI,SACJ,IACE,IAAMC,EAAMT,KAAKU,MAAMN,EAAEI,UACnBG,EAAK5B,EAAkCsB,EAAS,IAClDM,WACK5B,EAAkC0B,EAAIhB,OACzCgB,EAAIG,QACND,EAAG,KAAMF,EAAIpB,MAEbsB,EAAG,IAAIE,MAAMJ,EAAIK,WAGrB,MAAOjB,GACPkB,QAAQC,MAAM,iCAAkCnB,EAAIiB,W,MC6B7CG,MAnCf,WAAgB,IAAD,EACqBC,mBAAS,MAD9B,mBACNC,EADM,KACKC,EADL,OAEiBF,oBAAS,GAF1B,mBAENG,EAFM,KAEGC,EAFH,KAmBb,OACE,6BACE,4BAAQC,QAjBZ,YD0BIvC,EACKG,EAAuB,oBAEvBG,QAAQC,QAAQN,OAAOuC,OAAO,wBAAU,MC5B5BC,MAAK,SAACC,GACT,gDAAgDpB,KAAKoB,KAEjEJ,GAAW,GACXK,MAAM,4BAAD,OAA6BC,mBAAmBF,KAClDD,MAAK,SAACI,GAAD,OAAUA,EAAKC,UACpBL,MAAK,SAACM,GACLT,GAAW,GACXF,EAAaW,MAEdC,OAAM,SAAC5B,GAAD,OAAO6B,MAAM7B,EAAEU,kBAM1B,gBACCO,GAAW,oDACXF,IAAcA,EAAUe,QACvB,2BAAOC,MAAM,MAAMC,OAAO,MAAMC,QAAQ,WAAWC,sBAAA,EAAmBC,UAAQ,EAACC,OAAQrB,EAAUqB,QAC/F,4BAAQC,IAAKtB,EAAUuB,IAAKxC,KAAK,cADnC,gDAKDiB,IAAcA,EAAUe,QAAU,4BAAQX,QAAS,kBDQnBmB,ECRgDvB,EAAUuB,IDQrDC,ECR0DxB,EAAUyB,GDSvGzD,EAAuB,yBAA0B,CAAEuD,MAAKC,aAD1D,IAAgCD,EAAKC,ICRH,8CAClCxB,GAAaA,EAAUe,QAAU,iEC/BpBW,QACW,cAA7B5D,OAAO6D,SAASC,UAEe,UAA7B9D,OAAO6D,SAASC,UAEhB9D,OAAO6D,SAASC,SAASC,MACvB,2D,mBCVNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,GACrB,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEd3B,OAAM,SAAAhB,GACLD,QAAQC,MAAMA,EAAMF,c","file":"static/js/main.f87b0731.chunk.js","sourcesContent":["let __miniprogram_tunnel_message__cbs = {};\nconst isInMiniProgram = window.__wxjs_environment === 'miniprogram';\n\nwindow.onstorage = (e) => {\n  const matchKey = /__miniprogram_tunnel_message__r([0-9]+)/.exec(e.key);\n  if (matchKey) {\n    if (e.newValue) {\n      try {\n        const obj = JSON.parse(e.newValue);\n        const cb = __miniprogram_tunnel_message__cbs[matchKey[1]];\n        if (cb) {\n          delete __miniprogram_tunnel_message__cbs[obj.msgId];\n          if (obj.success) {\n            cb(null, obj.data);\n          } else {\n            cb(new Error(obj.message));\n          }\n        }\n      } catch (err) {\n        console.error('web-view parse message error: ', err.message);\n      }\n    }\n  }\n};\n\nfunction callMiniprogramService(name, data) {\n  return new Promise((resolve, reject) => {\n    const msgId = ('' + Math.random()).slice(2);\n    __miniprogram_tunnel_message__cbs[msgId] = (err, data) => {\n      if (!err) {\n        resolve(data);\n      } else {\n        reject(err);\n      }\n    };\n    localStorage.setItem(\n      `__miniprogram_tunnel_message__s${msgId}`,\n      JSON.stringify({ type: name, data })\n    );\n  });\n}\n\nexport function getClipboardText() {\n  if (isInMiniProgram) {\n    return callMiniprogramService('getClipboardText');\n  } else {\n    return Promise.resolve(window.prompt('请输入URL', ''));\n  }\n}\n\nexport function saveVideoToPhotosAlbum(url, fileName) {\n  return callMiniprogramService('saveVideoToPhotosAlbum', { url, fileName });\n}","import React, { useState, useEffect } from 'react';\nimport { getClipboardText, saveVideoToPhotosAlbum } from './wxbridge';\n\nimport './App.css';\n\n\n// interface VideoInfo {\n//   id: string;\n//   url: string;\n//   contentType: string;\n//   poster: string;\n// }\n\nfunction App() {\n  const [videoInfo, setVideoInfo] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  function tryExtractAndDisplay() {\n    getClipboardText().then((twitterURL) => {\n      const match = /https:\\/\\/twitter\\.com\\/[^/]+\\/status\\/\\d+\\/?/.exec(twitterURL);\n      if (match) {\n        setLoading(true);\n        fetch(`/api/extract/twitter?url=${encodeURIComponent(twitterURL)}`)\n          .then((resp) => resp.json())\n          .then((info) => {\n            setLoading(false);\n            setVideoInfo(info);\n          })\n          .catch((e) => alert(e.message));\n      }\n    });\n  }\n  return (\n    <div>\n      <button onClick={tryExtractAndDisplay}>提取</button>\n      {loading && <p>提取中...</p>}\n      {videoInfo && !videoInfo.failed && (\n        <video width=\"320\" height=\"240\" preload=\"metadata\" webkit-playsinline controls poster={videoInfo.poster}>\n          <source src={videoInfo.url} type=\"video/mp4\" />\n          Your browser does not support the video tag.\n        </video>\n      )}\n      {videoInfo && !videoInfo.failed && <button onClick={() => saveVideoToPhotosAlbum(videoInfo.url, videoInfo.id)}>保存视频到相册</button>}\n      {videoInfo && videoInfo.failed && <div>提取失败！</div>}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter, Route } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Route path=\"/\" exact={true}>\n      <App />\n    </Route>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}